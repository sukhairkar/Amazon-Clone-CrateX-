{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/supri/Desktop/amazon_replicate/app/api/generate-description/route.js"],"sourcesContent":["// /app/api/generate-description/route.ts\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst genAI = new GoogleGenerativeAI(AIzaSyAHxwjKCFwx2bhTSpTklBhGrgLooik_iYI);\r\n\r\nexport async function POST(req) {\r\n  const { name } = await req.json();\r\n\r\n  if (!name) {\r\n    return NextResponse.json({ error: \"Product name required.\" }, { status: 400 });\r\n  }\r\n\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n    const prompt = `Write a short, attractive product description for a product called \"${name}\". \r\nIt should sound natural, suitable for an online store, and not exceed 60 words.`;\r\n\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    const text = response.text().trim();\r\n\r\n    return NextResponse.json({ description: text });\r\n  } catch (error) {\r\n    console.error(\"Gemini error:\", error);\r\n    return NextResponse.json({ error: \"Failed to generate description.\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const { prompt } = await req.json();\r\n\r\n    // Dummy description for testing\r\n    const description = `This is a generated description based on: ${prompt}`;\r\n\r\n    return new Response(JSON.stringify({ description }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"API error:\", err);\r\n    return new Response(JSON.stringify({ error: \"Failed to generate\" }), {\r\n      status: 500,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,yCAAyC;;;;AACzC;AACA;;;AAEA,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC;AAE9B,eAAe,KAAK,GAAG;IAC5B,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;IAE/B,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9E;IAEA,IAAI;QACF,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAa;QAE7D,MAAM,SAAS,CAAC,oEAAoE,EAAE,KAAK;+EAChB,CAAC;QAE5E,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,MAAM,OAAO,SAAS,IAAI,GAAG,IAAI;QAEjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,aAAa;QAAK;IAC/C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkC,GAAG;YAAE,QAAQ;QAAI;IACvF;AACF;AAGO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QAEjC,gCAAgC;QAChC,MAAM,cAAc,CAAC,0CAA0C,EAAE,QAAQ;QAEzE,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE;QAAY,IAAI;YACnD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAqB,IAAI;YACnE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF","debugId":null}}]
}