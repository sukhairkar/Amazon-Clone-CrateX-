{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/supri/Desktop/amazon_replicate/app/api/generate-description/route.js"],"sourcesContent":["// // // /app/api/generate-description/route.ts\r\n// // // import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n// // // import { NextResponse } from \"next/server\";\r\n\r\n// // // const genAI = new GoogleGenerativeAI(AIzaSyAHxwjKCFwx2bhTSpTklBhGrgLooik_iYI);\r\n\r\n// // // export async function POST(req) {\r\n// // //   const { name } = await req.json();\r\n\r\n// // //   if (!name) {\r\n// // //     return NextResponse.json({ error: \"Product name required.\" }, { status: 400 });\r\n// // //   }\r\n\r\n// // //   try {\r\n// // //     const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n// // //     const prompt = `Write a short, attractive product description for a product called \"${name}\". \r\n// // // It should sound natural, suitable for an online store, and not exceed 60 words.`;\r\n\r\n// // //     const result = await model.generateContent(prompt);\r\n// // //     const response = await result.response;\r\n// // //     const text = response.text().trim();\r\n\r\n// // //     return NextResponse.json({ description: text });\r\n// // //   } catch (error) {\r\n// // //     console.error(\"Gemini error:\", error);\r\n// // //     return NextResponse.json({ error: \"Failed to generate description.\" }, { status: 500 });\r\n// // //   }\r\n// // // }\r\n\r\n\r\n// // export async function POST(req) {\r\n// //   try {\r\n// //     const { prompt } = await req.json();\r\n\r\n// //     // Dummy description for testing\r\n// //     const description = `This is a generated description based on: ${prompt}`;\r\n\r\n// //     return new Response(JSON.stringify({ description }), {\r\n// //       status: 200,\r\n// //       headers: { \"Content-Type\": \"application/json\" },\r\n// //     });\r\n// //   } catch (err) {\r\n// //     console.error(\"API error:\", err);\r\n// //     return new Response(JSON.stringify({ error: \"Failed to generate\" }), {\r\n// //       status: 500,\r\n// //       headers: { \"Content-Type\": \"application/json\" },\r\n// //     });\r\n// //   }\r\n// // }\r\n\r\n// import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// export async function POST(req) {\r\n//   try {\r\n//     const { prompt } = await req.json();\r\n\r\n//     const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\r\n//     const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n//     const result = await model.generateContent(\r\n//       `Write a short and vivid product description for: ${prompt}. \r\n//        Keep it under 50 words. It should be engaging, informative, and sound like real e-commerce copy.`\r\n//     );\r\n\r\n//     const description = result.response.text();\r\n\r\n//     return new Response(JSON.stringify({ description }), {\r\n//       status: 200,\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"Gemini error:\", err);\r\n//     return new Response(JSON.stringify({ error: \"Failed to generate\" }), {\r\n//       status: 500,\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//     });\r\n//   }\r\n// }\r\n\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport { env } from \"process\";\r\n\r\nexport async function POST(res) {\r\n  try {\r\n    const { prompt } = await res.json();\r\n\r\n    const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_API_KEY);\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n    const result = await model.generateContent(\r\n      `Write a short, vivid e‑commerce product description (≤50 words) for: ${prompt}`\r\n    );\r\n\r\n    const description = result.response.text();\r\n\r\n    return new Response(JSON.stringify({ description }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Gemini error:\", err);\r\n    return new Response(JSON.stringify({ error: \"Failed to generate\" }), {\r\n      status: 500,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,+CAA+C;AAC/C,oEAAoE;AACpE,oDAAoD;AAEpD,uFAAuF;AAEvF,0CAA0C;AAC1C,6CAA6C;AAE7C,uBAAuB;AACvB,4FAA4F;AAC5F,YAAY;AAEZ,gBAAgB;AAChB,6EAA6E;AAE7E,2GAA2G;AAC3G,0FAA0F;AAE1F,gEAAgE;AAChE,oDAAoD;AACpD,iDAAiD;AAEjD,6DAA6D;AAC7D,4BAA4B;AAC5B,mDAAmD;AACnD,qGAAqG;AACrG,YAAY;AACZ,UAAU;AAGV,uCAAuC;AACvC,aAAa;AACb,8CAA8C;AAE9C,0CAA0C;AAC1C,oFAAoF;AAEpF,gEAAgE;AAChE,wBAAwB;AACxB,4DAA4D;AAC5D,aAAa;AACb,uBAAuB;AACvB,2CAA2C;AAC3C,gFAAgF;AAChF,wBAAwB;AACxB,4DAA4D;AAC5D,aAAa;AACb,SAAS;AACT,OAAO;AAEP,8DAA8D;AAE9D,oCAAoC;AACpC,UAAU;AACV,2CAA2C;AAE3C,wEAAwE;AACxE,uEAAuE;AAEvE,kDAAkD;AAClD,sEAAsE;AACtE,2GAA2G;AAC3G,SAAS;AAET,kDAAkD;AAElD,6DAA6D;AAC7D,qBAAqB;AACrB,yDAAyD;AACzD,UAAU;AACV,oBAAoB;AACpB,2CAA2C;AAC3C,6EAA6E;AAC7E,qBAAqB;AACrB,yDAAyD;AACzD,UAAU;AACV,MAAM;AACN,IAAI;;;;AAEJ;AACA;;;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QAEjC,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB;QACpC,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAa;QAE7D,MAAM,SAAS,MAAM,MAAM,eAAe,CACxC,CAAC,qEAAqE,EAAE,QAAQ;QAGlF,MAAM,cAAc,OAAO,QAAQ,CAAC,IAAI;QAExC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE;QAAY,IAAI;YACnD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAqB,IAAI;YACnE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF","debugId":null}}]
}